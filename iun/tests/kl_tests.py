import os,sys
sys.path.insert(0, os.path.realpath(os.path.dirname(__file__) + '/../../iun'))
import unittest
from app.klpad import klPad, DsvrKSource
from app.config import IunCache
from app.strategy_factory import StrategyFactory
import stockrt as srt
import asyncio
import pandas as pd
from datetime import datetime

class TestklPadCache(unittest.TestCase):

    def test_cache_new_code(self):
        code = 'new_code'
        klines = pd.DataFrame([{'time': '2022-01-01', 'open': 10.0, 'close': 11.0, 'high': 12.0, 'low': 9.0, 'volume': 1000}])
        quotes = {'bid': 10.5, 'ask': 11.5}
        result = klPad.cache(code, klines, quotes)
        self.assertEqual(result, [1])
        self.assertEqual(klPad.get_quotes(code), quotes)

    def test_cache_existing_code(self):
        code = 'existing_code'
        klines = pd.DataFrame([{'time': '2022-01-01', 'open': 10.0, 'close': 11.0, 'high': 12.0, 'low': 9.0, 'volume': 1000}])
        klPad.cache(code, klines)
        klines = pd.DataFrame([{'time': '2022-01-02', 'open': 10.0, 'close': 11.0, 'high': 12.0, 'low': 9.0, 'volume': 1000}])
        quotes = {'bid': 10.5, 'ask': 11.5}
        result = klPad.cache(code, klines, quotes)
        self.assertEqual(result, [1, 2])
        self.assertEqual(klPad.get_quotes(code), quotes)

    def test_cache_empty_klines(self):
        code = 'test_code'
        klines = []
        quotes = {'bid': 10.5, 'ask': 11.5}
        result = klPad.cache(code, klines, quotes)
        self.assertEqual(result, [])
        result = klPad.cache(code, quotes=quotes)
        self.assertEqual(result, [])

    def test_cache_non_empty_klines(self):
        code = '603332'
        srt.set_array_format('pd')
        qk = srt.qklines([code], 1, 64)
        result = klPad.cache(code, qk['603332']['klines'], qk['603332']['qt'], 1)
        klines1 = klPad.get_klines(code, 1)
        klines2 = klPad.get_klines(code, 2)
        klines3 = klPad.get_klines(code, 4)
        klines4 = klPad.get_klines(code, 8)
        quotes = klPad.get_quotes(code)
        self.assertEqual(result, [1, 2, 4, 8])
        self.assertEqual(len(klines1), 64)
        self.assertEqual(quotes, qk['603332']['qt'])

    def test_cache_with_klines(self):
        code = '603332'
        klines1 = pd.DataFrame([
            {'time': '2025-05-26 09:51', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 2800, 'amount': 50315.9984},
            {'time': '2025-05-26 09:52', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 12200, 'amount': 219233.999}])
        result = klPad.cache(code, klines1)
        self.assertEqual(len(klPad.get_klines(code, 1)), 2)

        klines2 = pd.DataFrame([{'time': '2025-05-26 09:51', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 2800, 'amount': 50315.9984}, 
            {'time': '2025-05-26 09:52', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 12200, 'amount': 219233.999},
            {'time': '2025-05-26 09:53', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 5200, 'amount': 93443.9972},
            {'time': '2025-05-26 09:54', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 6200, 'amount': 111413.9962}])
        result = klPad.cache(code, klines2)
        self.assertEqual(len(klPad.get_klines(code, 1)), 4)

    def test_cache_klines_on_930(self):
        code = '603332'
        klines1 = pd.DataFrame([{'time': '2025-05-26 09:30', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 2800, 'amount': 50315.9984}, 
            {'time': '2025-05-26 09:31', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 12200, 'amount': 219233.999},
            {'time': '2025-05-26 09:32', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 5200, 'amount': 93443.9972},
            {'time': '2025-05-26 09:33', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 6200, 'amount': 111413.9962},
            {'time': '2025-05-26 09:34', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 6200, 'amount': 111413.9962}])
        klPad.cache(code, klines1)
        ckls = klPad.get_klines(code, 1)
        self.assertEqual(len(ckls), 4)
        self.assertEqual(ckls['time'].iloc[0], '2025-05-26 09:31')
        self.assertEqual(ckls['volume'].iloc[0], 15000)

    def test_get_lclose_from_klines(self):
        code = '603332'
        klines1 = [{'time': '2025-05-26 09:30', 'open': 17.97, 'close': 17.97, 'high': 17.97, 'low': 17.97, 'volume': 2800, 'amount': 50315.9984}, 
            {'time': '2025-05-26 09:31', 'open': 17.97, 'close': 17.9, 'high': 17.97, 'low': 17.97, 'volume': 12200, 'amount': 219233.999},
            {'time': '2025-05-26 09:32', 'open': 17.97, 'close': 17.91, 'high': 17.97, 'low': 17.97, 'volume': 5200, 'amount': 93443.9972},
            {'time': '2025-05-26 09:33', 'open': 17.97, 'close': 17.92, 'high': 17.97, 'low': 17.97, 'volume': 6200, 'amount': 111413.9962},
            {'time': '2025-05-26 09:34', 'open': 17.97, 'close': 17.93, 'high': 17.97, 'low': 17.97, 'volume': 6200, 'amount': 111413.9962}]
        klines1[-1]['time'] = datetime.now().strftime(f"%Y-%m-%d")
        klines1 = pd.DataFrame(klines1)
        klPad.cache(code, klines1)
        lclose = klPad.get_lclose_from_klines(code)
        self.assertEqual(lclose, 17.92)

    def test_expand_lines(self):
        code = '603332'
        klines1 = [
            ['2025-06-13 14:53',1.116,1.117,1.119,1.115,300000,343589.2],
            ['2025-06-13 14:54',1.117,1.117,1.119,1.115,300000,1542912.1],
            ['2025-06-13 14:55',1.117,1.117,1.119,1.115,300000,632110.3],
            ['2025-06-13 14:56',1.117,1.117,1.119,1.115,300000,240155.0],
            ['2025-06-13 14:57',1.117,1.117,1.119,1.115,300000,495724.6]]
        klines1 = pd.DataFrame(klines1, columns=['time', 'open', 'close', 'high', 'low', 'volume', 'amount'])
        klPad._klPad__stocks = {
            f'{code}': {
                'klines': {
                    1: klines1,
                    15: klines1
                }
            }
        }
        efac = klPad.expand_kltypes(code, 1)
        self.assertEqual(efac, [2, 4, 8])
        klines = klPad.get_klines(code, 8)
        self.assertEqual(klines['time'].iloc[0], '2025-06-13 14:57')
        self.assertEqual(klines['open'].iloc[0], 1.116)
        self.assertEqual(klines['high'].iloc[0], 1.119)
        self.assertEqual(klines['low'].iloc[0], 1.115)
        self.assertEqual(klines['close'].iloc[0], 1.117)

    def test_calcbss(self):
        code = '603332'
        klines1 = [
            ['2024-12-02',4.74,5.07,5.2,4.72],['2024-12-03',4.96,5.13,5.34,4.89],['2024-12-04',5.11,4.9,5.2,4.87],
            ['2024-12-05',4.83,4.94,4.99,4.83],['2024-12-06',4.93,5.12,5.26,4.88],['2024-12-09',5.05,4.97,5.14,4.9],
            ['2024-12-10',5.09,4.95,5.12,4.94],['2024-12-11',4.92,4.95,5.02,4.89],['2024-12-12',4.95,4.91,4.96,4.84],
            ['2024-12-13',4.85,4.77,4.88,4.77],['2024-12-16',4.75,4.75,4.83,4.71],['2024-12-17',4.73,4.5,4.76,4.47],
            ['2024-12-18',4.5,4.53,4.58,4.46],['2024-12-19',4.46,4.52,4.61,4.43],['2024-12-20',4.49,4.58,4.62,4.49],
            ['2024-12-23',4.61,4.41,4.71,4.38],['2024-12-24',4.39,4.74,4.86,4.3],['2024-12-25',4.56,4.45,4.6,4.38],
            ['2024-12-26',4.43,4.58,4.63,4.43],['2024-12-27',4.58,4.59,4.7,4.55],['2024-12-30',4.56,4.45,4.57,4.44],
            ['2024-12-31',4.48,4.24,4.55,4.23],['2025-01-02',4.24,4.16,4.31,4.1],['2025-01-03',4.16,3.98,4.21,3.96],
            ['2025-01-06',3.98,3.94,4.01,3.85],['2025-01-07',3.95,4.04,4.05,3.93],['2025-01-08',4.04,4.02,4.07,3.9],
            ['2025-01-09',4.02,4.04,4.11,4.0],['2025-01-10',4.05,3.93,4.08,3.93],['2025-01-13',3.89,4.33,4.33,3.82],
            ['2025-01-14',4.33,4.55,4.71,4.27],['2025-01-15',4.44,4.38,4.51,4.33],['2025-01-16',4.45,4.45,4.51,4.39],
            ['2025-01-17',4.4,4.73,4.9,4.4],['2025-01-20',4.64,4.63,4.71,4.55],['2025-01-21',4.68,4.72,4.86,4.61],
            ['2025-01-22',4.66,4.55,4.75,4.54],['2025-01-23',4.59,4.55,4.65,4.53],['2025-01-24',4.51,4.55,4.57,4.44],
            ['2025-01-27',4.61,4.43,4.64,4.42],['2025-02-05',4.46,4.46,4.5,4.4],['2025-02-06',4.44,4.57,4.57,4.42],
            ['2025-02-07',4.54,4.61,4.65,4.53],['2025-02-10',4.61,4.61,4.63,4.57],['2025-02-11',4.63,4.62,4.66,4.54],
            ['2025-02-12',4.6,4.65,4.66,4.58],['2025-02-13',4.63,4.58,4.66,4.58],['2025-02-14',4.58,4.53,4.6,4.51],
            ['2025-02-17',4.53,4.56,4.61,4.51],['2025-02-18',4.55,4.36,4.56,4.35],['2025-02-19',4.39,4.46,4.47,4.36],
            ['2025-02-20',4.44,4.51,4.53,4.43],['2025-02-21',4.51,4.49,4.54,4.39],['2025-02-24',4.48,4.5,4.54,4.45],
            ['2025-02-25',4.47,4.63,4.95,4.43],['2025-02-26',4.61,4.67,4.7,4.59],['2025-02-27',4.66,4.6,4.69,4.51],
            ['2025-02-28',4.61,4.65,4.73,4.55],['2025-03-03',4.7,4.81,4.85,4.66],['2025-03-04',4.81,4.77,4.82,4.7],
            ['2025-03-05',4.73,4.76,4.86,4.68],['2025-03-06',4.71,4.77,4.8,4.67],['2025-03-07',4.74,4.81,4.9,4.71],
            ['2025-03-10',4.84,4.77,4.9,4.77],['2025-03-11',4.68,4.73,4.74,4.64],['2025-03-12',4.74,4.72,4.77,4.69],
            ['2025-03-13',4.71,4.62,4.72,4.57],['2025-03-14',4.63,4.71,4.72,4.59],['2025-03-17',4.71,4.76,4.82,4.71],
            ['2025-03-18',4.76,4.75,4.78,4.71],['2025-03-19',4.74,4.69,4.74,4.67],['2025-03-20',4.69,4.94,5.16,4.67],
            ['2025-03-21',5.04,5.44,5.44,5.01],['2025-03-24',5.65,5.45,5.99,5.26],['2025-03-25',5.31,6.0,6.0,5.12],
            ['2025-03-26',6.16,6.03,6.6,5.99],['2025-03-27',5.87,6.64,6.64,5.87],['2025-03-28',6.76,6.73,7.31,6.46],
            ['2025-03-31',6.05,6.05,6.05,6.05],['2025-04-01',5.44,6.66,6.66,5.44],['2025-04-02',6.11,6.35,6.59,5.99],
            ['2025-04-03',6.23,6.99,6.99,6.14],['2025-04-07',7.22,6.44,7.55,6.33],['2025-04-08',6.94,7.09,7.09,6.63],
            ['2025-04-09',6.76,7.06,7.43,6.38],['2025-04-10',6.7,7.22,7.76,6.48],['2025-04-11',7.15,7.64,7.95,6.98],
            ['2025-04-14',7.74,8.1,8.4,7.46],['2025-04-15',7.76,8.91,8.91,7.76],['2025-04-16',8.7,9.81,9.81,8.64],
            ['2025-04-17',10.31,10.8,10.8,10.3],['2025-04-18',11.14,11.88,11.88,11.12],['2025-04-21',11.88,12.05,12.72,11.0],
            ['2025-04-22',11.7,13.26,13.26,11.69],['2025-04-23',11.93,11.93,12.21,11.93],['2025-04-24',11.46,12.26,12.7,11.46],
            ['2025-04-25',11.96,11.54,12.15,11.03],['2025-04-28',11.43,12.01,12.11,10.67],['2025-04-29',12.08,12.66,13.11,11.83],
            ['2025-04-30',12.36,12.4,13.02,12.12],['2025-05-06',12.36,12.4,12.68,11.54],['2025-05-07',12.5,13.64,13.64,12.41],
            ['2025-05-08',13.26,12.34,13.45,12.27],['2025-05-09',11.86,11.1,11.97,11.1],['2025-05-12',10.99,11.12,11.36,10.72],
            ['2025-05-13',11.01,11.57,11.94,10.86],['2025-05-14',11.37,12.24,12.56,11.16],['2025-05-15',11.99,11.27,12.26,11.22],
            ['2025-05-16',10.78,12.4,12.4,10.67],['2025-05-19',12.18,12.12,12.73,11.97],['2025-05-20',12.05,11.59,12.67,11.46],
            ['2025-05-21',11.18,12.75,12.75,11.02],['2025-05-22',12.72,11.65,12.85,11.57],['2025-05-23',11.39,11.18,11.83,10.96],
            ['2025-05-26',11.09,11.39,11.63,10.98],['2025-05-27',11.21,11.45,11.87,10.87],['2025-05-28',11.15,10.86,11.32,10.81],
            ['2025-05-29',10.7,10.55,11.06,10.22],['2025-05-30',10.36,9.71,10.38,9.66],['2025-06-03',9.62,9.79,10.0,9.61],
            ['2025-06-04',9.79,10.14,10.34,9.68],['2025-06-05',10.0,9.74,10.02,9.67],['2025-06-06',9.79,9.65,9.85,9.64],
            ['2025-06-09',9.65,9.8,9.9,9.58],['2025-06-10',9.78,9.63,10.01,9.47],['2025-06-11',9.56,10.13,10.51,9.46],
            ['2025-06-12',9.92,9.68,9.92,9.66],['2025-06-13',9.57,9.36,9.76,9.35],['2025-06-16',9.26,9.46,9.56,9.13],
            ['2025-06-17',9.51,9.27,9.54,9.21],['2025-06-18',9.24,9.15,9.25,9.07],['2025-06-19',9.1,8.82,9.2,8.8],
            ['2025-06-20',8.78,8.72,8.91,8.66],['2025-06-23',8.68,8.96,9.07,8.68],['2025-06-24',8.96,9.05,9.18,8.92],
            ['2025-06-25',9.0,8.98,9.13,8.86],['2025-06-26',8.9,8.97,9.18,8.85],['2025-06-27',8.91,9.07,9.27,8.89],
            ['2025-06-30',9.07,9.19,9.31,9.03],['2025-07-01',9.22,10.11,10.11,9.12],['2025-07-02',10.3,10.8,11.1,10.18],
            ['2025-07-03',10.47,10.1,10.48,10.02],['2025-07-04',9.98,9.86,10.29,9.86]]
        klines1 = pd.DataFrame(klines1, columns=['time', 'open', 'close', 'high', 'low'])
        klPad._klPad__stocks = {
            f'{code}': {
                'klines': {
                    101: klines1
                }
            }
        }
        klPad.calc_ma(code, 101, 18)
        klPad.calc_bss(code, 101, 18)
        self.assertEqual(klines1.loc[(klines1['bss18'] == 'b').where(lambda x: x).last_valid_index(), 'time'], '2025-07-03')
        self.assertEqual(klines1.loc[(klines1['bss18'] == 's').where(lambda x: x).last_valid_index(), 'time'], '2025-05-26')

    def test_getkline_data_from_datasvr(self):
        srt.set_array_format('pd')
        dsvr = DsvrKSource()
        code = '600110'
        kls = dsvr.klines(code, 101, 100)
        kls = dsvr.fklines(code, 101)
        klines = kls[code]
        self.assertEqual(len(klines), 100)

    def test_klpad_dsvr_klines(self):
        srt.set_array_format('pd')
        code = '600110'
        klPad.load_dsvr_klines(code, 101, 30)
        klines = klPad.get_klines(code, 101)
        self.assertEqual(len(klines), 30)

    def test_calc_kline_ma(self):
        klines = [['2025-07-08 09:45', 1.354, 1.354, 1.36, 1.353, 0.0059,0],
            ['2025-07-08 10:00', 1.354, 1.36, 1.363, 1.353, 0.0044,0],
            ['2025-07-08 10:15', 1.361, 1.358, 1.361, 1.357, -0.0015,0],
            ['2025-07-08 10:30', 1.359, 1.364, 1.366, 1.357, 0.0044,0],
            ['2025-07-08 10:45', 1.364, 1.361, 1.366, 1.36, -0.0022,0],
            ['2025-07-08 11:00', 1.361, 1.366, 1.366, 1.36, 0.0037,0],
            ['2025-07-08 11:15', 1.366, 1.368, 1.37, 1.364, 0.0015,0],
            ['2025-07-08 11:30', 1.369, 1.368, 1.369, 1.365, 0.0,0],
            ['2025-07-08 13:15', 1.368, 1.365, 1.368, 1.362, -0.0022,0],
            ['2025-07-08 13:30', 1.364, 1.362, 1.365, 1.362, -0.0022,0],
            ['2025-07-08 13:45', 1.363, 1.364, 1.365, 1.362, 0.0015,0],
            ['2025-07-08 14:00', 1.365, 1.367, 1.368, 1.364, 0.0022,0],
            ['2025-07-08 14:15', 1.367, 1.366, 1.368, 1.364, -0.0007,0],
            ['2025-07-08 14:30', 1.366, 1.367, 1.368, 1.365, 0.0007,0],
            ['2025-07-08 14:45', 1.368, 1.367, 1.368, 1.366, 0.0,0],
            ['2025-07-08 15:00', 1.367, 1.368, 1.369, 1.367, 0.0007,0],
            ['2025-07-09 09:45', 1.368, 1.36, 1.369, 1.359, -0.0058,0],
            ['2025-07-09 10:00', 1.36, 1.363, 1.364, 1.356, 0.0022,0],
            ['2025-07-09 10:15', 1.363, 1.362, 1.364, 1.36, -0.0007,0],
            ['2025-07-09 10:30', 1.362, 1.363, 1.364, 1.36, 0.0007,0],
            ['2025-07-09 10:45', 1.363, 1.364, 1.365, 1.362, 0.0007,0],
            ['2025-07-09 11:00', 1.363, 1.359, 1.364, 1.359, -0.0037,0],
            ['2025-07-09 11:15', 1.359, 1.358, 1.359, 1.356, -0.0007,0],
            ['2025-07-09 11:30', 1.358, 1.358, 1.359, 1.357, 0.0,0],
            ['2025-07-09 13:15', 1.359, 1.358, 1.36, 1.357, 0.0,0],
            ['2025-07-09 13:30', 1.358, 1.356, 1.358, 1.355, -0.0015,0],
            ['2025-07-09 13:45', 1.357, 1.353, 1.357, 1.352, -0.0022,0],
            ['2025-07-09 14:00', 1.353, 1.353, 1.354, 1.352, 0.0,0],
            ['2025-07-09 14:15', 1.353, 1.35, 1.353, 1.347, -0.0022,0],
            ['2025-07-09 14:30', 1.349, 1.35, 1.351, 1.349, 0.0,0],
            ['2025-07-09 14:45', 1.35, 1.347, 1.35, 1.346, -0.0022,0],
            ['2025-07-09 15:00', 1.347, 1.35, 1.351, 1.346, 0.0022,0],
            ['2025-07-10 09:45', 1.346, 1.346, 1.35, 1.341, -0.003,0],
            ['2025-07-10 10:00', 1.347, 1.344, 1.349, 1.344, -0.0015,0],
            ['2025-07-10 10:15', 1.344, 1.344, 1.347, 1.343, 0.0,0],
            ['2025-07-10 10:30', 1.345, 1.343, 1.345, 1.342, -0.0007,0],
            ['2025-07-10 10:45', 1.344, 1.343, 1.346, 1.343, 0.0,0],
            ['2025-07-10 11:00', 1.343, 1.344, 1.345, 1.341, 0.0007,0],
            ['2025-07-10 11:15', 1.344, 1.345, 1.345, 1.342, 0.0007,0],
            ['2025-07-10 11:30', 1.345, 1.344, 1.346, 1.343, -0.0007,0],
            ['2025-07-10 13:15', 1.344, 1.346, 1.347, 1.342, 0.0015,0],
            ['2025-07-10 13:30', 1.345, 1.345, 1.346, 1.343, -0.0007,0],
            ['2025-07-10 13:45', 1.345, 1.345, 1.346, 1.344, 0.0,0],
            ['2025-07-10 14:00', 1.345, 1.346, 1.347, 1.345, 0.0007,0],
            ['2025-07-10 14:15', 1.345, 1.348, 1.348, 1.345, 0.0015,0],
            ['2025-07-10 14:30', 1.348, 1.347, 1.349, 1.346, -0.0007,0],
            ['2025-07-10 14:45', 1.347, 1.347, 1.348, 1.345, 0.0,0],
            ['2025-07-10 15:00', 1.347, 1.348, 1.349, 1.346, 0.0007,0],
            ['2025-07-11 09:45', 1.348, 1.359, 1.361, 1.348, 0.0082,0],
            ['2025-07-11 10:00', 1.359, 1.364, 1.365, 1.356, 0.0037,0],
            ['2025-07-11 10:15', 1.364, 1.364, 1.369, 1.362, 0.0,0],
            ['2025-07-11 10:30', 1.364, 1.367, 1.367, 1.363, 0.0022,0],
            ['2025-07-11 10:45', 1.367, 1.367, 1.368, 1.365, 0.0,0],
            ['2025-07-11 11:00', 1.367, 1.364, 1.368, 1.363, -0.0022,0],
            ['2025-07-11 11:15', 1.365, 1.362, 1.365, 1.361, -0.0015,0],
            ['2025-07-11 11:30', 1.362, 1.365, 1.366, 1.361, 0.0022,0],
            ['2025-07-11 13:15', 1.367, 1.365, 1.37, 1.365, 0.0,0],
            ['2025-07-11 13:30', 1.365, 1.366, 1.368, 1.364, 0.0007,0],
            ['2025-07-11 13:45', 1.367, 1.368, 1.369, 1.366, 0.0015,0],
            ['2025-07-11 14:00', 1.368, 1.367, 1.37, 1.366, -0.0007,0],
            ['2025-07-11 14:15', 1.368, 1.367, 1.368, 1.366, 0.0,0],
            ['2025-07-11 14:30', 1.367, 1.367, 1.369, 1.366, 0.0,0],
            ['2025-07-11 14:45', 1.367, 1.363, 1.368, 1.363, -0.0029,0],
            ['2025-07-11 15:00', 1.363, 1.361, 1.365, 1.36, -0.0015,0]]
        columns=['time', 'open', 'close', 'high', 'low', 'change', 'volume']
        code1 = '513050'
        code = '513051'
        df = pd.DataFrame(klines, columns=columns)
        klPad.cache(code, df, kltype=15)
        df = pd.DataFrame(klines[:32], columns=columns)
        kltypes = klPad.cache(code1, df, kltype=15)
        self.assertEqual(kltypes, [15, 30, 60, 120])
        for i in range(33, len(klines), 8):
            for t in range(8):
                df = pd.DataFrame(klines[:i+t], columns=columns)
                kltypes = klPad.cache(code1, df, kltype=15)
                expected = [[15], [15, 30], [15], [15,30,60], [15], [15, 30], [15], [15,30,60,120]]
                self.assertEqual(kltypes, expected[t])
        ma18 = klPad.get_klines(code, 15)['ma18']
        ma18_1 = klPad.get_klines(code1, 15)['ma18']
        for ma1, ma2 in zip(ma18, ma18_1):
            self.assertAlmostEqual(ma1, ma2)

class TestStrategyGE(unittest.TestCase):
    def setUp(self):
        IunCache.cache_strategy_data('collat', '510050', {'holdCost': 2.6994, 'holdCount': 14500.0, 'strategies': {'grptype': 'GroupStandard', 'strategies': {
                '0': {'key': 'StrategyGE', 'enabled': True, 'stepRate': 0.03, 'account': 'credit',
                        'kltype': '30', 'guardPrice': '2.706000', 'inCritical': False, 'selltype': 'egate', 'cutselltype': 'egate'}},
                'transfers': {'0': {'transfer': -1}}, 'amount': 10000,
                'buydetail': [
                    {'id': 2, 'code': 'SH510050', 'date': '2024-11-19', 'count': 2600, 'price': 2.776, 'sid': '260544', 'type': 'B'},
                    {'id': 432, 'code': 'SH510050', 'date': '2025-04-25', 'count': 3700, 'price': 2.706, 'sid': '382233', 'type': 'B'},
                    {'id': 561, 'code': 'SH510050', 'date': '2024-11-25', 'count': 4000, 'price': 2.682, 'sid': '436853', 'type': 'B'},
                    {'id': 562, 'code': 'SH510050', 'date': '2025-04-07', 'count': 4200, 'price': 2.581, 'sid': '311495', 'type': 'B'}],
                'buydetail_full': [
                    {'id': 2, 'code': 'SH510050', 'date': '2023-08-03', 'count': 3600, 'price': 2.716, 'sid': '305584', 'type': 'B'},
                    {'id': 3, 'code': 'SH510050', 'date': '2024-11-19', 'count': 7200, 'price': 2.776, 'sid': '260544', 'type': 'B'},
                    {'id': 4, 'code': 'SH510050', 'date': '2024-11-25', 'count': 7400, 'price': 2.682, 'sid': '436853', 'type': 'B'},
                    {'id': 238, 'code': 'SH510050', 'date': '2025-04-07', 'count': 800, 'price': 2.581, 'sid': '311495', 'type': 'B'},
                    {'id': 471, 'code': 'SH510050', 'date': '2025-04-23', 'count': 8200, 'price': 2.707, 'sid': '275716', 'type': 'S'},
                    {'id': 484, 'code': 'SH510050', 'date': '2025-04-23', 'count': 8200, 'price': 2.711, 'sid': '275716', 'type': 'S'},
                    {'id': 498, 'code': 'SH510050', 'date': '2025-04-25', 'count': 3700, 'price': 2.71, 'sid': '382233', 'type': 'B'}]}}
        )
        self.strategy = StrategyFactory.stock_strategy('StrategyGE')

    def test_check_kline(self):
        async def call_check_kline():
            await self.strategy.check_kline('collat', '510050', [1, 15, 30])
        loop = asyncio.get_event_loop()
        loop.run_until_complete(call_check_kline())


if __name__ == '__main__':
    suite = unittest.TestSuite()
    # suite.addTest(TestStrategyGE('test_check_kline'))
    suite.addTest(TestklPadCache('test_calc_kline_ma'))
    runner = unittest.TextTestRunner()
    runner.run(suite)

    # unittest.main()
